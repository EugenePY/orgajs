{"componentChunkName":"component---packages-gatsby-theme-orga-src-templates-post-query-js","path":"/docs/untitled-post","webpackCompilationHash":"","result":{"data":{"orgContent":{"html":"<div>Create an <code>index.js</code> file like this.</div><pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> unified <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unified'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unified-stream'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> parse <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'orga-unified'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> mutate <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'orga-rehype'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rehype-stringify'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> processor <span class=\"token operator\">=</span> <span class=\"token function\">unified</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>parse<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>mutate<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n\nprocess<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>processor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">)</span></code></pre><div>Run command:</div><pre><code class=\"language-sh\">node index.js < README.org > readme.html</code></pre><div class=\"section\"><h1>Generate Static Website With Gatsby</h1><div></div><div class=\"section\"><h2>Setup</h2><div>Install the plugin.</div><pre><code class=\"language-sh\">npm install gatsby-transformer-orga</code></pre><div>Add it to your <code>plugins</code> list.</div><pre><code class=\"language-javascript\"><span class=\"token comment\">// In your gatsby-config.js</span>\n     plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gatsby-transformer-orga</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span></code></pre><div class=\"section\"><h2>Parsing</h2><div>Files with <code>.org</code> extension will be considered org files. Each org file is parsed into a node of type <code>OrgFile</code>. Each <code>OrgFile</code> node will have one or more <code>OrgContent</code> nodes, depending on the mode (section or file based).</div><div class=\"section\"><h2>Modes</h2><div><code>gatsby-transformer-orga</code> plugin provides 2 ways to generate your content from your org-mode source files.</div><ul><li>one document per org-mode file</li><li>one document per section (sub-tree)</li>The former is the default option. To enable section based generation, add <code>ORGA_PUBLISH_KEYWORD</code> to your org file, and sections with matching keyword will be transformed into a standalone document. E.g.,#+ORGA_PUBLISH_KEYWORD: DONE</ul><div>,* DONE My First Post</div><div>...</div><div>,* TODO A Draft</div><div>In this case, the first section will become a post. The second won't.</div><div class=\"section\"><h3>Data Mapping Table (File Based)</h3><div>| meta field       | first option       | second option ||------------------+--------------------+---------------|</div><div>| <code>title</code>            | <code>#+TITLE</code>            | \"Untitled\"    || <code>export_file_name</code> | <code>#+EXPORT_FILE_NAME</code> | the file name |</div><div>| <code>category</code>         | <code>#+CATEGORY</code>         | N/A           || <code>tags</code>             | <code>#+TAGS</code>             | N/A           |</div><div>All the rest of the  will be automatically added to the <code>meta</code> field. And they are queryable from Gatsby's graphql interface. They are lower-cased for consistency purpose.</div><div class=\"section\"><h3>Data Mapping Table (Section Based)</h3><div>| meta field       | first option              | second option   ||------------------+---------------------------+-----------------|</div><div>| <code>title</code>            | first headline text       | N/A             || <code>export_file_name</code> | <code>EXPORT_FIEL_NAME</code> property | sanitised <code>title</code> |</div><div>| <code>category</code>         | <code>CATEGORY</code> property         | the file name   || <code>tags</code>             | headline tags             | N/A             |</div><div>All the rest of the  of the headline will be automatically added to the <code>meta</code> field. And they are queryable from Gatsby's graphql interface. They are lower-cased for consistency purpose.</div><div class=\"section\"><h2>Query Examples</h2><div>To get all content node (<code>OrgContent</code>):</div><pre><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n       <span class=\"token attr-name\">allOrgContent</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token attr-name\">edges</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token attr-name\">node</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n         html\n         meta <span class=\"token punctuation\">{</span>\n           title\n           tags\n           category\n         <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span></code></pre></div></div></div></div></div></div></div>","fields":{"slug":"/docs/untitled-post"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"a41a72a7-ce0a-57cb-9501-2a504dc4ca61 >>> OrgFile >>> OrgContent[2]","metadata":{"category":"docs","title":"untitled post","description":"Learn how to generate static website with gatsbyjs, using org-mode files as source.","date":null}}}}