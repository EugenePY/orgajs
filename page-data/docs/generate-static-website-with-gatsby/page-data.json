{"componentChunkName":"component---packages-gatsby-theme-orga-src-templates-post-query-js","path":"/docs/generate-static-website-with-gatsby","webpackCompilationHash":"120a9b45e57574eb88e3","result":{"data":{"orgContent":{"html":"<p> </p><div class=\"section\"><h1>Setup</h1><p>Install the plugin.  </p><pre><code class=\"language-sh\">npm install gatsby-transformer-orga</code></pre><p> Add it to your <code>plugins</code> list. </p><pre><code class=\"language-javascript\"><span class=\"token comment\">// In your gatsby-config.js</span>\n     plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gatsby-transformer-orga</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span></code></pre><p> </p></div><div class=\"section\"><h1>Parsing</h1><p>Files with <code>.org</code> extension will be considered org files. Each org file is parsed into a node of type <code>OrgFile</code>. Each <code>OrgFile</code> node will have one or more <code>OrgContent</code> nodes, depending on the mode (section or file based). </p></div><div class=\"section\"><h1>Modes</h1><p><code>gatsby-transformer-orga</code> plugin provides 2 ways to generate your content from your org-mode source files. </p><ul><li>one document per org-mode file</li><li>one document per section (sub-tree)</li>The former is the default option. To enable section based generation, add <code>ORGA_PUBLISH_KEYWORD</code> to your org file, and sections with matching keyword will be transformed into a standalone document. E.g.,#+ORGA_PUBLISH_KEYWORD: DONE</ul><p>,* DONE My First Post </p><p>  </p><p>...  </p><p>,* TODO A Draft </p><p>  </p><p>In this case, the first section will become a post. The second won't.  </p><div class=\"section\"><h2>Data Mapping Table (File Based)</h2><table><tbody><tr><td> meta field       </td><td> first option       </td><td> second option </td></tr><tr><td><code>title</code></td><td><code>#+TITLE</code></td><td> \"Untitled\"    </td></tr><tr><td><code>export_file_name</code></td><td><code>#+EXPORT_FILE_NAME</code></td><td> the file name </td></tr><tr><td><code>category</code></td><td><code>#+CATEGORY</code></td><td> N/A           </td></tr><tr><td><code>tags</code></td><td><code>#+TAGS</code></td><td> N/A           </td></tr></tbody></table><p> All the rest of the <a href=\"https:////orgmode.org/manual/In_002dbuffer-settings.html\">In-buffer Settings</a> will be automatically added to the <code>meta</code> field. And they are queryable from Gatsby's graphql interface. They are lower-cased for consistency purpose. </p><p> </p></div><div class=\"section\"><h2>Data Mapping Table (Section Based)</h2><table><tbody><tr><td> meta field       </td><td> first option              </td><td> second option   </td></tr><tr><td><code>title</code></td><td> first headline text       </td><td> N/A             </td></tr><tr><td><code>export_file_name</code></td><td><code>EXPORT_FIEL_NAME</code> property </td><td> sanitised <code>title</code></td></tr><tr><td><code>category</code></td><td><code>CATEGORY</code> property         </td><td> the file name   </td></tr><tr><td><code>tags</code></td><td> headline tags             </td><td> N/A             </td></tr></tbody></table><p> All the rest of the <a href=\"https:////orgmode.org/manual/Property-syntax.html\">Properties</a> of the headline will be automatically added to the <code>meta</code> field. And they are queryable from Gatsby's graphql interface. They are lower-cased for consistency purpose. </p><p> </p></div></div><div class=\"section\"><h1>Query Examples</h1><p>To get all content node (<code>OrgContent</code>):  </p><pre><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n       <span class=\"token attr-name\">allOrgContent</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token attr-name\">edges</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token attr-name\">node</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n         html\n         meta <span class=\"token punctuation\">{</span>\n           title\n           tags\n           category\n         <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/docs/generate-static-website-with-gatsby"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"a41a72a7-ce0a-57cb-9501-2a504dc4ca61 >>> OrgFile >>> OrgContent[2]","metadata":{"category":"docs","title":"Generate Static Website With Gatsby","description":"Learn how to generate static website with gatsbyjs, using org-mode files as source.","date":null}}}}