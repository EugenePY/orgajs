{"componentChunkName":"component---packages-gatsby-theme-orga-src-templates-post-query-js","path":"/docs/docs","webpackCompilationHash":"","result":{"data":{"orgContent":{"html":"<div class=\"section\"><h1>Basics Usages</h1><div></div><div>This documentation explains how to use orga to parse org-mode content into AST.</div><div>Find the complete definition of AST .</div><div>See the syntax .</div><div>An .</div><div class=\"section\"><h2>Install</h2><pre><code>npm install orga</code></pre><div class=\"section\"><h2>Examples</h2><div class=\"section\"><h3>Getting Started</h3><div>Create a file <code>test.js</code>.</div><pre><code>const { parse } = require('orga')\nconst content = \"* TODO Hello World\"\nconst ast = parse(content)</code></pre><div>The <code>ast</code> would look like this:</div><pre><code>{ type: 'root',\n  children:\n  [ { type: 'section',\n      children:\n      [ { type: 'headline',\n          children:\n          [ { type: 'text',\n              children: [ [length]: 0 ],\n              value: 'hello world',\n              parent: [circular] },\n            [length]: 1 ],\n          level: 1,\n          keyword: 'todo',\n          priority: undefined,\n          tags: [ [length]: 0 ],\n          parent: [circular] },\n        [length]: 1 ],\n      level: 1,\n      parent: [circular] },\n    [length]: 1 ],\n  settings: {} }</code></pre><div class=\"section\"><h3>Add Options</h3><div>You can customize the parser by sending in options.</div><pre><code>const { parse } = require(`orga`)\nconst content = \"* NEXT Hello World\"\nconst ast = parse(content, { todos: ['TODO', 'NEXT', 'DONE'] })</code></pre><div class=\"section\"><h3>User the <code>Parser</code></h3><pre><code>const { Parser } = require(`orga`)\nconst content = \"* NEXT Hello World\"\nconst parser = new Parser() // the Parser accept options too\nconst ast = parser.parse(content)</code></pre><div class=\"section\"><h2>Options</h2><div>| key   | type             | function      | Default          ||-------+------------------+---------------+------------------|</div><div>| todos | Array of Strings | TODO keywords | ['TODO', 'DONE'] |</div><div class=\"section\"><h1>With Unified</h1><div></div><div> is an awesome ecosystem for text processing. Here is how to plug <code>orga</code> into it.</div><div class=\"section\"><h2>Setup</h2><div>Install dependencies.</div><pre><code>npm install unified unified-stream orga-unified orga-rehype rehype-stringify</code></pre><div class=\"section\"><h2>Usage</h2><div>Create an <code>index.js</code> file like this.</div><pre><code>const unified = require('unified')\nconst stream = require('unified-stream')\nconst parse = require('orga-unified')\nconst mutate = require('orga-rehype')\nconst html = require('rehype-stringify')\n\nconst processor = unified()\n      .use(parse)\n      .use(mutate)\n      .use(html)\n\nprocess.stdin.pipe(stream(processor)).pipe(process.stdout)</code></pre><div>Run command:</div><pre><code>node index.js &#x3C; README.org > readme.html</code></pre><div class=\"section\"><h1>Generate Static Website With Gatsby</h1><div></div><div class=\"section\"><h2>Setup</h2><div>Install the plugin.</div><pre><code>npm install gatsby-transformer-orga</code></pre><div>Add it to your <code>plugins</code> list.</div><pre><code>// In your gatsby-config.js\n     plugins: [`gatsby-transformer-orga`]</code></pre><div class=\"section\"><h2>Parsing</h2><div>Files with <code>.org</code> extension will be considered org files. Each org file is parsed into a node of type <code>OrgFile</code>. Each <code>OrgFile</code> node will have one or more <code>OrgContent</code> nodes, depending on the mode (section or file based).</div><div class=\"section\"><h2>Modes</h2><div><code>gatsby-transformer-orga</code> plugin provides 2 ways to generate your content from your org-mode source files.</div><div><div>one document per org-mode file</div><div>one document per section (sub-tree)</div>The former is the default option. To enable section based generation, add <code>ORGA_PUBLISH_KEYWORD</code> to your org file, and sections with matching keyword will be transformed into a standalone document. E.g.,#+ORGA_PUBLISH_KEYWORD: DONE</div><div>,* DONE My First Post</div><div>...</div><div>,* TODO A Draft</div><div>In this case, the first section will become a post. The second won't.</div><div class=\"section\"><h3>Data Mapping Table (File Based)</h3><div>| meta field       | first option       | second option ||------------------+--------------------+---------------|</div><div>| <code>title</code>            | <code>#+TITLE</code>            | \"Untitled\"    || <code>export_file_name</code> | <code>#+EXPORT_FILE_NAME</code> | the file name |</div><div>| <code>category</code>         | <code>#+CATEGORY</code>         | N/A           || <code>tags</code>             | <code>#+TAGS</code>             | N/A           |</div><div>All the rest of the  will be automatically added to the <code>meta</code> field. And they are queryable from Gatsby's graphql interface. They are lower-cased for consistency purpose.</div><div class=\"section\"><h3>Data Mapping Table (Section Based)</h3><div>| meta field       | first option              | second option   ||------------------+---------------------------+-----------------|</div><div>| <code>title</code>            | first headline text       | N/A             || <code>export_file_name</code> | <code>EXPORT_FIEL_NAME</code> property | sanitised <code>title</code> |</div><div>| <code>category</code>         | <code>CATEGORY</code> property         | the file name   || <code>tags</code>             | headline tags             | N/A             |</div><div>All the rest of the  of the headline will be automatically added to the <code>meta</code> field. And they are queryable from Gatsby's graphql interface. They are lower-cased for consistency purpose.</div><div class=\"section\"><h2>Query Examples</h2><div>To get all content node (<code>OrgContent</code>):</div><pre><code>{\n       allOrgContent: {\n     edges: {\n       node: {\n         html\n         meta {\n           title\n           tags\n           category\n         }\n       }\n     }\n       }\n     }</code></pre></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div>","fields":{"slug":"/docs/docs"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"a41a72a7-ce0a-57cb-9501-2a504dc4ca61 >>> OrgFile >>> OrgContent[0]","metadata":{"category":"docs","title":"Untitled","description":null,"date":null}}}}